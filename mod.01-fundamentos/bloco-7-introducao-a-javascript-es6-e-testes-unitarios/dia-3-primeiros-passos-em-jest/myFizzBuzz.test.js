//ðŸš€ 3 - A funÃ§Ã£o myFizzBuzz(num) recebe um nÃºmero num e retorna "fizzbuzz" se o nÃºmero for divisÃ­vel por 3 e 5, retorna "fizz" se for divisÃ­vel apenas por 3, retorna "buzz" se divisÃ­vel apenas por 5, retorna o prÃ³prio nÃºmero caso nÃ£o seja divisÃ­vel por 3 ou 5 e retorna false caso num nÃ£o seja um nÃºmero
//1.FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e 5 e verifique se o retorno Ã© o esperado
//2.FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 3 e verifique se o retorno Ã© o esperado
//3.FaÃ§a uma chamada com um nÃºmero divisÃ­vel por 5 e verifique se o retorno Ã© o esperado
//4.FaÃ§a uma chamada com um nÃºmero que nÃ£o Ã© divisÃ­vel por 3 ou 5 e verifique se o retorno Ã© o esperado
//5.FaÃ§a uma chamada com um parÃ¢metro que nÃ£o Ã© um nÃºmero e verifique se o retorno Ã© o esperado

const myFizzBuzz = require('./myFizzBuzz.js');

describe('Testa a funÃ§Ã£o fizzBuzz', () => {
    test('Verifica se uma chamada com um nÃºmero divisÃ­vel por 3 e 5', () => {
        expect(myFizzBuzz(15)).toEqual('fizzBuzz');
    });
    test('Verifica se uma chamada com um nÃºmero divisÃ­vel por 3', () => {
        expect(myFizzBuzz(3)).toEqual('fizz');
    });
    test('Verifica se uma chamada com um nÃºmero divisÃ­vel por 5', () => {
        expect(myFizzBuzz(5)).toEqual('buzz');
    });
    test('Verifica se uma chamada com um nÃºmero que nÃ£o Ã© divisÃ­vel por 3 e 5', () => {
        expect(myFizzBuzz(1)).toEqual(1);
    });
    test('Verifica se uma chamada com um parÃ¢metro que nÃ£o Ã© um nÃºmero', () => {
        expect(myFizzBuzz('1')).toEqual(false);
    });
})